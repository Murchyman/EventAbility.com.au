---
import Layout from "@layouts/Default.astro";
import { turso } from "src/lib/turso";
import Card from "@components/generic/Card.astro";
import { getSignedUrlForFile } from "src/lib/s3";
import { Image } from "astro:assets";

// Redirect if not logged in
if (!Astro.locals.user) {
  return Astro.redirect(
    "/signin?redirect=" + encodeURIComponent(Astro.url.pathname),
  );
}

// Fetch user's registered events
const registeredEvents = await turso.execute({
  sql: `
    SELECT e.*, ep.joined_at, 
    CASE WHEN ep.user_id IS NOT NULL THEN true ELSE false END AS is_participating
    FROM events e 
    INNER JOIN event_participants ep ON e.event_id = ep.event_id 
    WHERE ep.user_id = ?
    ORDER BY e.start_time DESC
  `,
  args: [Astro.locals.user.id],
});

// Format the events
const events = registeredEvents.rows.map((row) => {
  return registeredEvents.columns.reduce((obj: any, column, index) => {
    obj[column] = row[index];
    return obj;
  }, {});
});

// Helper function to convert date to event's timezone
function getDateInTimezone(date: Date, timezone: string): Date {
  return new Date(date.toLocaleString("en-US", { timeZone: timezone }));
}

const now = new Date();
const sixHoursAgo = new Date(now.getTime() - 6 * 60 * 60 * 1000);
const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

// Get only matching period events with timezone awareness
const matchingEvents = events.filter((event) => {
  const eventEndTime = new Date(event.end_time);
  const eventTimezoneSixHoursAgo = getDateInTimezone(
    sixHoursAgo,
    event.timezone || "UTC",
  );
  const eventTimezoneOneWeekAgo = getDateInTimezone(
    oneWeekAgo,
    event.timezone || "UTC",
  );
  return (
    eventEndTime <= eventTimezoneSixHoursAgo &&
    eventEndTime > eventTimezoneOneWeekAgo
  );
});

// Fetch matched users
const matchedUsersData = await turso.execute({
  sql: `
    SELECT DISTINCT
      p.user_id, p.first_name, p.age, p.region, p.interests,
      e.event_id, e.name AS event_name,
      m.matched_at,
      p.instagram_handle
    FROM matches m
    JOIN profile p ON (
      CASE 
        WHEN m.user_id_1 = ? THEN m.user_id_2 = p.user_id
        ELSE m.user_id_1 = p.user_id
      END
    )
    JOIN events e ON m.event_id = e.event_id
    WHERE (m.user_id_1 = ? OR m.user_id_2 = ?)
    AND m.status = 'matched' 
    AND m.status != 'deleted'
    ORDER BY m.matched_at DESC
  `,
  args: [Astro.locals.user.id, Astro.locals.user.id, Astro.locals.user.id],
});

const matchedUsers = matchedUsersData.rows;

// Get profile pictures for matched users
for (const user of matchedUsers) {
  const url = await getSignedUrlForFile(
    String(user.user_id),
    "profile-pictures",
  );
  user.image = String(url);
}
---

<Layout
  title="Social Spot | Connections"
  description="Here you can see your connections from events you have attended"
  classList="min-h-screen flex flex-col"
  pageTitle="Social Spot | Connections"
>
  <main class="bg-[#B8E8FF] flex-grow px-6 py-12">
    <div class="max-w-6xl mx-auto space-y-8">
      {
        matchedUsers.length === 0 ? (
          <Card>
            <div class="p-8 text-center space-y-4">
              <h2 class="text-2xl font-bold tracking-tight poppins">
                No Connections Yet
              </h2>
              <p class="max-w-2xl mx-auto">
                Start connecting with other event attendees! Join some
                accessible events and connect with people who share your
                interests and experiences.
              </p>
              <div class="mt-6 flex flex-col sm:flex-row gap-3 justify-center">
                <a
                  href="/events"
                  class="inline-block bg-black text-white px-8 py-3 rounded-lg hover:opacity-90 font-bold transition-all"
                >
                  Browse Accessible Events
                </a>
                <a
                  href="/bookings"
                  class="inline-block bg-black text-white px-8 py-3 rounded-lg hover:opacity-90 font-bold transition-all"
                >
                  See People From Events You've Attended
                </a>
              </div>
            </div>
          </Card>
        ) : (
          <>
            <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {matchedUsers.map((user) => (
                <Card wrapper={true}>
                  <div class="relative pb-[90%] overflow-hidden rounded-t-lg">
                    <Image
                      src={String(user.image)}
                      alt={`${user.first_name}'s profile picture`}
                      width={800}
                      height={800}
                      class="absolute top-0 left-0 w-full h-full object-cover"
                    />
                  </div>

                  <div class="p-4 bg-white rounded-b-lg">
                    <div class="flex justify-between items-start">
                      <div class="space-y-1">
                        <h3 class="text-xl font-bold poppins text-gray-900">
                          {user.first_name}, {user.age}
                        </h3>
                        <p class="text-gray-600 text-xs">{user.region}</p>
                        <p class="text-gray-500 text-xs">
                          Met at: {user.event_name}
                        </p>
                        {user.instagram_handle && (
                          <a
                            href={`https://instagram.com/${user.instagram_handle}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="inline-flex items-center gap-1 text-xs text-[#E1306C] hover:text-[#C13584] mt-1"
                          >
                            <svg
                              class="w-4 h-4"
                              viewBox="0 0 24 24"
                              fill="currentColor"
                            >
                              <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" />
                            </svg>
                            {user.instagram_handle}
                          </a>
                        )}
                      </div>

                      {/* Three-dot menu button */}
                      <div class="relative z-20">
                        <button
                          class="actions-menu-btn p-2 hover:bg-gray-100 rounded-full transition-colors"
                          aria-label="More actions"
                          type="button"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                          >
                            <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                          </svg>
                        </button>
                        {/* Dropdown menu */}
                        <div
                          class="actions-menu hidden absolute right-0 mt-2 py-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50"
                          style="position: absolute;"
                        >
                          <button
                            type="button"
                            class="delete-match-btn w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                            data-user-id={user.user_id}
                            data-user-name={user.first_name}
                          >
                            Remove Connection
                          </button>
                          <button
                            type="button"
                            class="report-btn w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                            data-user-id={user.user_id}
                            data-user-name={user.first_name}
                          >
                            Report User
                          </button>
                        </div>
                      </div>
                    </div>

                    <div class="mt-2">
                      <div class="flex flex-wrap gap-1">
                        {JSON.parse(String(user.interests) || "[]").map(
                          (interest: string) => (
                            <span class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                              {interest}
                            </span>
                          ),
                        )}
                      </div>
                    </div>

                    <div class="mt-2 -mx-4 -mb-4 px-4 pb-4">
                      <a
                        href={`/chat/${user.user_id}`}
                        class="block text-center bg-black text-white px-6 py-3 rounded-lg hover:opacity-90 font-bold transition-all"
                      >
                        Chat with {user.first_name}
                      </a>
                    </div>
                  </div>
                </Card>
              ))}
            </div>

            <Card>
              <div class="p-8 text-center space-y-4">
                <h2 class="text-2xl font-bold tracking-tight poppins">
                  Want More Friends?
                </h2>
                <p class="max-w-2xl mx-auto">
                  Check out our accessible events and start connecting with
                  other attendees! The more events you join and people you
                  interact with, the better chance you have of making meaningful
                  friendships.
                </p>
                <div class="mt-6">
                  <a
                    href="/events"
                    class="inline-block bg-black text-white px-8 py-3 rounded-lg hover:opacity-90 font-bold transition-all"
                  >
                    Browse Accessible Events
                  </a>
                </div>
              </div>
            </Card>
          </>
        )
      }
    </div>
  </main>

  <!-- Report Modal -->
  <div
    id="reportModal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center"
    style="display: none;"
  >
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h2 class="text-xl font-bold mb-4">
        Report <span id="reportUserName"></span>
      </h2>
      <form id="reportForm">
        <input type="hidden" id="reportUserId" name="reportUserId" />
        <div class="mb-4">
          <label
            for="reportReason"
            class="block text-sm font-medium text-gray-700 mb-1"
          >
            Reason for Report
          </label>
          <select
            id="reportReason"
            name="reportReason"
            class="w-full p-2 border border-gray-300 rounded-md"
            required
          >
            <option value="">Select a reason</option>
            <option value="harassment">Harassment</option>
            <option value="inappropriate">Inappropriate Behavior</option>
            <option value="spam">Spam</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="mb-4">
          <label
            for="reportDetails"
            class="block text-sm font-medium text-gray-700 mb-1"
          >
            Additional Details
          </label>
          <textarea
            id="reportDetails"
            name="reportDetails"
            rows="3"
            class="w-full p-2 border border-gray-300 rounded-md"
            required></textarea>
        </div>
        <div class="flex justify-end space-x-2">
          <button
            type="button"
            id="cancelReport"
            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
          >
            Submit Report
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Match Modal -->
  <div
    id="deleteMatchModal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center"
    style="display: none;"
  >
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h2 class="text-xl font-bold mb-4">
        Remove Connection with <span id="deleteMatchUserName"></span>?
      </h2>
      <p class="text-gray-600 mb-4">
        This will remove the connection and chat history will no longer be
        available. This action cannot be undone.
      </p>
      <div class="flex justify-end space-x-2">
        <button
          type="button"
          id="cancelDelete"
          class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
        >
          Cancel
        </button>
        <button
          type="button"
          id="confirmDelete"
          class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
          data-user-id=""
        >
          Remove
        </button>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ currentUserId: Astro.locals.user.id }}>
  // Format dates
  document.querySelectorAll("[data-date]").forEach((element) => {
    if (element instanceof HTMLElement && element.dataset.date) {
      try {
        const date = new Date(element.dataset.date);
        if (isNaN(date.getTime())) throw new Error("Invalid date");
        element.textContent = new Intl.DateTimeFormat("en-US", {
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        }).format(date);
      } catch (error) {
        console.error("Error formatting date:", error);
        element.textContent = element.dataset.date || "Invalid date";
      }
    }
  });

  // Add reporting functionality
  const reportModal = document.getElementById("reportModal");
  const reportForm = document.getElementById("reportForm");
  const reportUserName = document.getElementById("reportUserName");
  const reportUserId = document.getElementById("reportUserId");

  function showModal() {
    reportModal.style.display = "flex";
    reportModal.classList.remove("hidden");
  }

  function hideModal() {
    reportModal.style.display = "none";
    reportModal.classList.add("hidden");
  }

  document.querySelectorAll(".report-btn").forEach((button) => {
    button.addEventListener("click", () => {
      showModal();
      reportUserName.textContent = button.dataset.userName;
      reportUserId.value = button.dataset.userId;
    });
  });

  cancelReport.addEventListener("click", () => {
    hideModal();
    reportForm.reset();
  });

  reportForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    try {
      const formData = new FormData(reportForm);
      formData.append("reportedBy", currentUserId);

      const response = await fetch("/api/report", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) throw new Error("Failed to submit report");
      hideModal();
      reportForm.reset();
    } catch (error) {
      console.error("Report error:", error);
      alert("Failed to submit report. Please try again.");
    }
  });

  reportModal.addEventListener("click", (e) => {
    if (e.target === reportModal) {
      hideModal();
      reportForm.reset();
    }
  });

  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      hideModal();
      reportForm.reset();
    }
  });

  // Delete match functionality
  const deleteMatchModal = document.getElementById("deleteMatchModal");
  const deleteMatchUserName = document.getElementById("deleteMatchUserName");
  const cancelDelete = document.getElementById("cancelDelete");
  const confirmDelete = document.getElementById("confirmDelete");

  function showDeleteModal() {
    deleteMatchModal.style.display = "flex";
    deleteMatchModal.classList.remove("hidden");
  }

  function hideDeleteModal() {
    deleteMatchModal.style.display = "none";
    deleteMatchModal.classList.add("hidden");
  }

  document.querySelectorAll(".delete-match-btn").forEach((button) => {
    button.addEventListener("click", () => {
      const userId = button.dataset.userId;
      const userName = button.dataset.userName;
      deleteMatchUserName.textContent = userName;
      confirmDelete.dataset.userId = userId;
      showDeleteModal();
    });
  });

  cancelDelete.addEventListener("click", hideDeleteModal);

  confirmDelete.addEventListener("click", async () => {
    try {
      const userId = confirmDelete.dataset.userId;
      const formData = new FormData();
      formData.append("user_id_1", currentUserId);
      formData.append("user_id_2", userId);

      const response = await fetch("/api/deleteMatch", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to delete match");
      }

      if (data.status === "success") {
        location.reload();
      } else {
        throw new Error(data.message || "Failed to delete match");
      }
    } catch (error) {
      console.error("Delete match error:", error);
      alert(error.message || "Failed to delete match. Please try again.");
      hideDeleteModal();
    }
  });

  // Close modal on outside click or escape key
  deleteMatchModal.addEventListener("click", (e) => {
    if (e.target === deleteMatchModal) {
      hideDeleteModal();
    }
  });

  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      hideDeleteModal();
    }
  });

  // Add dropdown menu functionality
  document.querySelectorAll(".actions-menu-btn").forEach((button) => {
    const menu = button.nextElementSibling;

    button.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();

      // Close all other menus
      document.querySelectorAll(".actions-menu").forEach((m) => {
        if (m !== menu) {
          m.classList.add("hidden");
        }
      });

      // Toggle current menu
      menu.classList.toggle("hidden");
    });
  });

  // Close menus when clicking anywhere
  document.addEventListener("click", (e) => {
    const target = e.target;

    if (
      !target.closest(".actions-menu") &&
      !target.closest(".actions-menu-btn")
    ) {
      document.querySelectorAll(".actions-menu").forEach((menu) => {
        menu.classList.add("hidden");
      });
    }
  });

  // Close menus on escape key
  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      document.querySelectorAll(".actions-menu").forEach((menu) => {
        menu.classList.add("hidden");
      });
    }
  });
</script>

<style>
  .actions-menu {
    transform-origin: top right;
    transition: opacity 0.1s ease-in-out;
  }

  .actions-menu:not(.hidden) {
    display: block;
    opacity: 1;
  }

  /* Reset brutal card styles on mobile */
  .brutal-card {
    @apply bg-white;
    filter: none;
    border: none;
    padding: 0;
  }

  /* Restore brutal card styles on desktop */
  @media (min-width: 640px) {
    .brutal-card {
      background-color: var(--color);
      border: 3px solid black;
      filter: drop-shadow(7px 7px 0 rgb(0 0 0 / 1));
      padding: 1rem;
    }

    .brutal-card:hover {
      filter: drop-shadow(5px 5px 0 rgb(0 0 0 / 1));
    }
  }
</style>
