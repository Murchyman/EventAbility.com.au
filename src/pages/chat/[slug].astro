---
import Layout from "@layouts/Default.astro";
import Card from "@components/generic/Card.astro";
import { turso } from "src/lib/turso";
import { getSignedUrlForFile } from "src/lib/s3";
import { Image } from "astro:assets";

const { slug = "" } = Astro.params;
const currentUserId = Astro.locals.user?.id ?? "";

if (!currentUserId) {
  return Astro.redirect("/signin");
}

// Check if match exists and is not deleted
const matchExists = await turso.execute({
  sql: `SELECT id FROM matches 
        WHERE ((user_id_1 = ? AND user_id_2 = ?) 
        OR (user_id_1 = ? AND user_id_2 = ?))
        AND status = 'matched'`,
  args: [currentUserId, slug, slug, currentUserId],
});

// If no active match exists, redirect to matches page
if (matchExists.rows.length === 0) {
  return Astro.redirect("/matches");
}

// Get chat partner's profile
const userData = await turso.execute({
  sql: `
    SELECT p.user_id, p.first_name, p.age
    FROM profile p
    WHERE p.user_id = ?
  `,
  args: [slug || ""],
});

const user = userData.rows[0];
if (!user) {
  return Astro.redirect("/matches");
}

// Get user's profile picture
const profilePicture = await getSignedUrlForFile(
  String(user.user_id),
  "profile-pictures",
);

const pusherKey = import.meta.env.PUSHER_KEY;
const pusherCluster = import.meta.env.PUSHER_CLUSTER;
---

<!-- Add this to your <head> by modifying the Layout component or adding it here -->
<script is:inline src="https://js.pusher.com/8.0.1/pusher.min.js"></script>

<Layout
  title="Event Ability | Chat"
  description="Chat with your friends from events"
  classList="min-h-screen flex flex-col"
  pageTitle="Event Ability | Chat"
>
  <main class="bg-[#B8E8FF] flex-grow">
    <div class="max-w-6xl mx-auto h-full">
      <div class="h-full flex flex-col">
        {/* Chat Header */}
        <div class="bg-white border-b-2 border-black p-4">
          <div class="flex items-center gap-4">
            <a
              href="/matches"
              class="text-black hover:opacity-70 transition-opacity"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
            </a>
            <div class="flex-grow">
              <h2 class="text-xl font-bold">{user.first_name}, {user.age}</h2>
              <p class="text-sm text-gray-600">{user.region}</p>
            </div>
            <div class="ml-auto flex gap-2">
              {/* Three-dot menu button */}
              <div class="relative z-20">
                <button
                  class="actions-menu-btn flex items-center justify-center p-2 text-4xl text-black-800 transition-all"
                  aria-label="Actions"
                >
                  â‹®
                </button>
                <div
                  class="actions-menu hidden absolute right-0 mt-2 py-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50"
                  style="position: absolute;"
                >
                  <button
                    type="button"
                    class="delete-match-btn w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 border-b border-gray-100"
                    data-user-id={user.user_id}
                    data-user-name={user.first_name}
                  >
                    Remove Connection
                  </button>
                  <button
                    type="button"
                    class="report-btn w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                    data-user-id={user.user_id}
                    data-user-name={user.first_name}
                  >
                    Report User
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Chat Messages */}
        <div
          id="messages"
          class="flex-grow overflow-y-auto p-4 space-y-4"
          style="height: calc(100vh - 200px);"
        >
          {
            messages.map((message) => (
              <div
                class:list={[
                  "flex",
                  {
                    "justify-end": message.sender_id === currentUserId,
                    "justify-start": message.sender_id !== currentUserId,
                  },
                ]}
              >
                <div
                  class:list={[
                    "max-w-[70%] rounded-lg p-3",
                    {
                      "bg-[#FF5F1F] text-white":
                        message.sender_id === currentUserId,
                      "bg-white": message.sender_id !== currentUserId,
                    },
                  ]}
                >
                  <p class="break-words">{message.content}</p>
                  <p
                    class:list={[
                      "text-xs mt-1",
                      {
                        "text-white/70": message.sender_id === currentUserId,
                        "text-gray-500": message.sender_id !== currentUserId,
                      },
                    ]}
                    data-date={message.sent_at}
                  >
                    Loading...
                  </p>
                </div>
              </div>
            ))
          }
        </div>

        {/* Message Input */}
        <div class="bg-white border-t-2 border-black p-4">
          <form id="messageForm" class="flex gap-2">
            <input type="hidden" name="receiver_id" value={user.user_id} />
            <input
              type="text"
              name="content"
              class="flex-grow p-2 border-2 border-black rounded-lg"
              placeholder="Type your message..."
              required
            />
            <button
              type="submit"
              class="bg-black text-white px-6 py-2 rounded-lg hover:opacity-90 font-bold transition-all"
            >
              Send
            </button>
          </form>
        </div>
      </div>
    </div>
  </main>

  {/* Report Modal */}
  <div
    id="reportModal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center"
    style="display: none;"
  >
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h2 class="text-xl font-bold mb-4">
        Report <span id="reportUserName"></span>
      </h2>
      <form id="reportForm">
        <input type="hidden" id="reportUserId" name="reportUserId" />
        <div class="mb-4">
          <label
            for="reportReason"
            class="block text-sm font-medium text-gray-700 mb-1"
          >
            Reason for Report
          </label>
          <select
            id="reportReason"
            name="reportReason"
            class="w-full p-2 border border-gray-300 rounded-md"
            required
          >
            <option value="">Select a reason</option>
            <option value="harassment">Harassment</option>
            <option value="inappropriate">Inappropriate Behavior</option>
            <option value="spam">Spam</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="mb-4">
          <label
            for="reportDetails"
            class="block text-sm font-medium text-gray-700 mb-1"
          >
            Additional Details
          </label>
          <textarea
            id="reportDetails"
            name="reportDetails"
            rows="3"
            class="w-full p-2 border border-gray-300 rounded-md"
            required></textarea>
        </div>
        <div class="flex justify-end space-x-2">
          <button
            type="button"
            id="cancelReport"
            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
          >
            Submit Report
          </button>
        </div>
      </form>
    </div>
  </div>

  {/* Delete Match Modal */}
  <div
    id="deleteMatchModal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center"
    style="display: none;"
  >
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h2 class="text-xl font-bold mb-4">
        Remove Connection with <span id="deleteMatchUserName"></span>?
      </h2>
      <p class="text-gray-600 mb-4">
        This will remove the connection and chat history will no longer be
        available. This action cannot be undone.
      </p>
      <div class="flex justify-end space-x-2">
        <button
          type="button"
          id="cancelDelete"
          class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
        >
          Cancel
        </button>
        <button
          type="button"
          id="confirmDelete"
          class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
          data-user-id=""
        >
          Remove
        </button>
      </div>
    </div>
  </div>
</Layout>

<script
  is:inline
  define:vars={{
    currentUserId,
    slug,
    firstName: user.first_name,
    pusherKey,
    pusherCluster,
  }}
>
  // Format dates
  document.querySelectorAll("[data-date]").forEach((element) => {
    if (element instanceof HTMLElement && element.dataset.date) {
      try {
        const date = new Date(element.dataset.date);
        if (isNaN(date.getTime())) throw new Error("Invalid date");
        element.textContent = new Intl.DateTimeFormat("en-US", {
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        }).format(date);
      } catch (error) {
        console.error("Error formatting date:", error);
        element.textContent = element.dataset.date || "Invalid date";
      }
    }
  });

  // Scroll to bottom of messages
  const messages = document.getElementById("messages");
  if (messages) {
    messages.scrollTop = messages.scrollHeight;
  }

  // Handle message form submission
  const messageForm = document.getElementById("messageForm");
  messageForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const form = e.currentTarget;
    const formData = new FormData(form);

    try {
      const response = await fetch("/api/message", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error || "Failed to send message");

      // Clear input and reload page to show new message
      form.reset();
      location.reload();
    } catch (error) {
      console.error("Message error:", error);
      alert(error.message || "Failed to send message. Please try again.");
    }
  });

  // Report functionality
  const reportModal = document.getElementById("reportModal");
  const reportForm = document.getElementById("reportForm");
  const reportUserName = document.getElementById("reportUserName");
  const reportUserId = document.getElementById("reportUserId");

  function showModal() {
    reportModal.style.display = "flex";
    reportModal.classList.remove("hidden");
  }

  function hideModal() {
    reportModal.style.display = "none";
    reportModal.classList.add("hidden");
  }

  document.querySelectorAll(".report-btn").forEach((button) => {
    button.addEventListener("click", () => {
      const userId = button.dataset.userId;
      const userName = button.dataset.userName;
      reportUserName.textContent = userName;
      reportUserId.value = userId;
      showModal();
    });
  });

  reportForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);

    try {
      const response = await fetch("/api/report", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) throw new Error("Failed to submit report");
      hideModal();
      reportForm.reset();
    } catch (error) {
      console.error("Report error:", error);
      alert(error.message || "Failed to submit report. Please try again.");
    }
  });

  document.getElementById("cancelReport")?.addEventListener("click", hideModal);

  // Delete match functionality
  const deleteMatchModal = document.getElementById("deleteMatchModal");
  const deleteMatchUserName = document.getElementById("deleteMatchUserName");
  const confirmDelete = document.getElementById("confirmDelete");
  const cancelDelete = document.getElementById("cancelDelete");

  function showDeleteModal() {
    deleteMatchModal.style.display = "flex";
    deleteMatchModal.classList.remove("hidden");
  }

  function hideDeleteModal() {
    deleteMatchModal.style.display = "none";
    deleteMatchModal.classList.add("hidden");
  }

  document.querySelectorAll(".delete-match-btn").forEach((button) => {
    button.addEventListener("click", () => {
      const userId = button.dataset.userId;
      const userName = button.dataset.userName;
      deleteMatchUserName.textContent = userName;
      confirmDelete.dataset.userId = userId;
      showDeleteModal();
    });
  });

  cancelDelete.addEventListener("click", hideDeleteModal);

  confirmDelete.addEventListener("click", async () => {
    try {
      const userId = confirmDelete.dataset.userId;
      const formData = new FormData();
      formData.append("user_id_1", currentUserId);
      formData.append("user_id_2", userId);

      const response = await fetch("/api/deleteMatch", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to delete match");
      }

      if (data.status === "success") {
        // Redirect to matches page after successful deletion
        window.location.href = "/matches";
      } else {
        throw new Error(data.message || "Failed to delete match");
      }
    } catch (error) {
      console.error("Delete match error:", error);
      alert(error.message || "Failed to delete match. Please try again.");
      hideDeleteModal();
    }
  });

  // Close modal on outside click or escape key
  deleteMatchModal.addEventListener("click", (e) => {
    if (e.target === deleteMatchModal) {
      hideDeleteModal();
    }
  });

  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      hideDeleteModal();
    }
  });

  // Add dropdown menu functionality
  document.querySelectorAll(".actions-menu-btn").forEach((button) => {
    const menu = button.nextElementSibling;

    button.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();

      // Close all other menus
      document.querySelectorAll(".actions-menu").forEach((m) => {
        if (m !== menu) {
          m.classList.add("hidden");
        }
      });

      // Toggle current menu
      menu.classList.toggle("hidden");
    });
  });

  // Close menus when clicking anywhere
  document.addEventListener("click", (e) => {
    const target = e.target;

    if (
      !target.closest(".actions-menu") &&
      !target.closest(".actions-menu-btn")
    ) {
      document.querySelectorAll(".actions-menu").forEach((menu) => {
        menu.classList.add("hidden");
      });
    }
  });

  // Close menus on escape key
  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      document.querySelectorAll(".actions-menu").forEach((menu) => {
        menu.classList.add("hidden");
      });
    }
  });

  // Mark messages as read
  fetch("/api/markMessagesAsRead", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      sender_id: slug,
    }),
  }).catch((error) => {
    console.error("Error marking messages as read:", error);
  });
</script>
