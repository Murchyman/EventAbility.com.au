---
import Layout from "@layouts/Default.astro";
import Card from "@components/generic/Card.astro";

export const prerender = true;
---

<style>
  input[type="password"]::-ms-reveal,
  input[type="password"]::-ms-clear,
  input[type="password"]::-webkit-contacts-auto-fill-button,
  input[type="password"]::-webkit-credentials-auto-fill-button {
    display: none !important;
  }

  #toggle-password,
  #toggle-confirm-password {
    padding: 0.5rem;
    font-size: 1rem;
  }

  @media (max-width: 640px) {
    #toggle-password,
    #toggle-confirm-password {
      padding: 0.75rem;
      font-size: 1.25rem;
    }
  }
</style>

<Layout title="Reset Password" description="Reset your password">
  <div class="min-h-screen bg-[#00B4FF] p-6 flex items-center justify-center">
    <Card>
      <div class="space-y-6">
        <div class="space-y-2">
          <h1 class="text-4xl font-bold tracking-tight">Reset Password</h1>
          <p class="text-lg" id="description">Enter your new password below.</p>
        </div>
        <form class="space-y-4">
          <div class="space-y-2">
            <label for="password" class="text-lg font-medium"
              >New Password</label
            >
            <div class="relative">
              <input
                type="password"
                name="password"
                id="password"
                required
                minlength="8"
                class="w-full h-12 bg-white/90 border-2 border-black rounded-xl text-lg px-3"
              />
              <button
                type="button"
                id="toggle-password"
                class="absolute right-3 top-1/2 -translate-y-1/2 text-sm font-medium text-gray-600 hover:text-gray-900 focus:outline-none"
                aria-label="Toggle password visibility"
              >
                Show
              </button>
            </div>
          </div>
          <div class="space-y-2">
            <label for="confirmPassword" class="text-lg font-medium"
              >Confirm Password</label
            >
            <div class="relative">
              <input
                type="password"
                name="confirmPassword"
                id="confirmPassword"
                required
                minlength="8"
                class="w-full h-12 bg-white/90 border-2 border-black rounded-xl text-lg px-3"
              />
              <button
                type="button"
                id="toggle-confirm-password"
                class="absolute right-3 top-1/2 -translate-y-1/2 text-sm font-medium text-gray-600 hover:text-gray-900 focus:outline-none"
                aria-label="Toggle password visibility"
              >
                Show
              </button>
            </div>
          </div>
          <button
            type="submit"
            class="w-full h-12 text-lg font-medium bg-[#FF5F1F] hover:bg-[#FF5F1F]/90 text-white rounded-xl border-2 border-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]"
          >
            Reset Password
          </button>
        </form>
        <div id="form-error" class="hidden">
          <p
            class="p-4 text-red-600 text-lg border-2 border-red-600 rounded-lg bg-red-50 flex items-center gap-2"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span id="error-message"></span>
          </p>
        </div>
      </div>
    </Card>
  </div>
</Layout>

<script>
  import { authClient } from "src/lib/auth-client";

  // Check if user is already authenticated and redirect if needed
  const checkAuth = async () => {
    try {
      const { data: session, error } = await authClient.getSession();
      // Only redirect if we have a valid session
      if (session && !error) {
        window.location.href = "/";
      }
    } catch (error) {
      console.error("Error checking auth status:", error);
    }
  };

  // Run the auth check when the page loads
  document.addEventListener("DOMContentLoaded", checkAuth);

  const errorContainer = document.getElementById("form-error")!;
  const errorMessage = document.getElementById("error-message")!;
  const description = document.getElementById("description")!;

  // Check for token in URL
  const token = new URLSearchParams(window.location.search).get("token");
  if (!token) {
    description.textContent = "Please click the reset link from your email.";
    document.forms[0].style.display = "none";
    errorMessage.textContent = "No reset token found.";
    errorContainer.classList.remove("hidden");
  }

  document.forms[0].addEventListener("submit", async (e) => {
    e.preventDefault();
    errorContainer.classList.add("hidden");

    const formData = new FormData(e.target as HTMLFormElement);
    const password = formData.get("password") as string;
    const confirmPassword = formData.get("confirmPassword") as string;

    if (password !== confirmPassword) {
      errorMessage.textContent = "Passwords do not match.";
      errorContainer.classList.remove("hidden");
      return;
    }

    try {
      const { error } = await authClient.resetPassword({
        newPassword: password,
      });

      if (error) {
        errorMessage.textContent = error.message ?? "An error occurred";
        errorContainer.classList.remove("hidden");
        return;
      }

      // Show success message and redirect
      errorMessage.textContent = "Password reset successful!";
      errorContainer.classList.remove("hidden");
      (errorContainer.firstElementChild as HTMLElement).classList.remove(
        "text-red-600",
        "border-red-600",
        "bg-red-50",
      );
      (errorContainer.firstElementChild as HTMLElement).classList.add(
        "text-green-600",
        "border-green-600",
        "bg-green-50",
      );

      // Redirect after 2 seconds
      setTimeout(() => {
        window.location.href = "/signin";
      }, 2000);
    } catch (error) {
      errorMessage.textContent = "Failed to reset password. Please try again.";
      errorContainer.classList.remove("hidden");
    }
  });

  // Password toggle functionality
  const togglePassword = document.getElementById("toggle-password")!;
  const toggleConfirmPassword = document.getElementById(
    "toggle-confirm-password",
  )!;
  const passwordInput = document.getElementById("password") as HTMLInputElement;
  const confirmPasswordInput = document.getElementById(
    "confirmPassword",
  ) as HTMLInputElement;

  passwordInput.type = "password";
  confirmPasswordInput.type = "password";

  function togglePasswordVisibility(
    input: HTMLInputElement,
    button: HTMLElement,
  ) {
    const type = input.type === "password" ? "text" : "password";
    input.type = type;
    button.textContent = type === "password" ? "Show" : "Hide";
  }

  togglePassword.addEventListener("click", () => {
    togglePasswordVisibility(passwordInput, togglePassword);
  });

  toggleConfirmPassword.addEventListener("click", () => {
    togglePasswordVisibility(confirmPasswordInput, toggleConfirmPassword);
  });
</script>
